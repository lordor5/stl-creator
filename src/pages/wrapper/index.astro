---
import { readFileSync } from "fs";
import { transform } from "@jscad/core";

import Layout from "../../layouts/Layout.astro";

export async function get() {
  try {
    // Read the JSCAD file content as a string
    const jscadScript = readFileSync("path/to/your/file.jscad", "utf8");

    // Parse and evaluate the JSCAD script
    const { api } = await import("@jscad/core");
    const mainFunction = new Function("api", jscadScript); // injects JSCAD API into the script's scope
    const shapes = mainFunction(api); // Call the JSCAD script's main function to get shapes

    // Convert shapes to 3D model data
    const data3d = await transform({ output: "json" }, shapes);

    return {
      body: JSON.stringify({ model: data3d }),
      headers: { "Content-Type": "application/json" },
    };
  } catch (error) {
    return { status: 500, body: JSON.stringify({ error: error.message }) };
  }
}
---

<Layout title="Welcome to Astro.">
  <main>
    <form
      action="/Initiative/initiative"
      method="POST"
      enctype="multipart/form-data"
      id="walls"
    >
      <button>Submit</button>
    </form>
    <div class="viwer" id="myCanvas"></div>
  </main>
  <script is:inline type="module">
    import * as THREE from "three";
    import { OrbitControls } from "three/addons/controls/OrbitControls.js";
    import { STLLoader } from "three/addons/loaders/STLLoader.js";

    const scene = new THREE.Scene();

    const canvas = document.getElementById("myCanvas");
    const camera = new THREE.PerspectiveCamera(
      45,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );

    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(canvas.clientWidth, canvas.clientHeight);
    //camera.aspect = canvas.clientWidth /  canvas.clientHeight;

    canvas.appendChild(renderer.domElement);

    const light = new THREE.HemisphereLight(0xffffff, 0x000000, 5);
    scene.add(light);

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x404040, 2); // Soft ambient light
    scene.add(ambientLight);

    var grid = new THREE.GridHelper(200, 20);
    scene.add(grid);

    const controls = new OrbitControls(camera, renderer.domElement);
    camera.position.set(0, 80, 80);
    controls.update();

    let lastModel = null; // Variable to store reference to the last model
    function removeLastModel() {
      if (lastModel) {
        scene.remove(lastModel); // Remove the last model from the scene

        // Dispose of the geometry and material to free up resources
        lastModel.geometry.dispose();
        lastModel.material.dispose();

        lastModel = null; // Reset the lastModel reference
      }
    }

    function updateCameraAndControls(model) {
      const boundingBox = new THREE.Box3().setFromObject(model);
      const center = boundingBox.getCenter(new THREE.Vector3());
      const size = boundingBox.getSize(new THREE.Vector3());

      const maxDim = Math.max(size.x, size.y, size.z);
      const fov = camera.fov * (Math.PI / 180);
      // let cameraZ = Math.abs(maxDim / Math.sin(fov / 2));

      // Set the camera position and update controls
      // camera.position.set(center.x, center.y, cameraZ);
      controls.target.set(center.x, center.y, center.z);
      controls.update();

      camera.updateProjectionMatrix();
    }

    function loadModel(arrayBuffer) {
      const loader = new STLLoader();
      const geometry = loader.parse(arrayBuffer);

      const material = new THREE.MeshPhongMaterial({ color: 0xffffff });
      const mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);

      mesh.position.set(0, 0, 0);
      mesh.rotation.set(-Math.PI / 2, 0, 0);
      mesh.scale.set(1, 1, 1);

      removeLastModel();
      lastModel = mesh;

      updateCameraAndControls(mesh);
    }

    const wallsForm = document.getElementById("walls");

    wallsForm.addEventListener("submit", (e) => {
      e.preventDefault();

      // updateWalls();

      // let data = {
      //   numColumns: numColumns,
      //   numRows: numRows,
      //   wallThickness: wallThickness,
      //   length: length,
      //   width: width,
      //   height: height,
      // };

      const apiUrl = "Initiative/initiative";
      const requestOptions = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        //body: JSON.stringify({ walls, data }),
      };

      fetch(apiUrl, requestOptions)
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.arrayBuffer(); // Fetch the data as an ArrayBuffer
        })
        .then((arrayBuffer) => {
          loadModel(arrayBuffer);
        })
        .catch((error) => {
          console.error("Error loading model:", error);
        });
    });

    // Function to handle window resize
    function onWindowResize() {
      const container = document.getElementById("myCanvas");
      const width = container.clientWidth;
      const height = container.clientHeight;

      renderer.setSize(width, height);
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
    }

    window.addEventListener("resize", onWindowResize);

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }

    renderer.setAnimationLoop(animate);
  </script>
</Layout>
<style>
  img {
    max-width: 3rem;
  }
  .info {
    display: flex;
    align-items: center;
  }
  .options {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-bottom: 2rem;
  }
  main {
    display: flex;
  }
  main .viwer,
  main form {
    margin: 2rem;
  }
  .grid {
    display: grid;
    width: fit-content;
  }
  .estrechoY {
    height: 1.5rem;
    margin: 0;
  }
  .estrechoX {
    width: 1.5rem;
    margin: 0;
  }
  #myCanvas {
    height: 80vh;
    width: 100%;
  }
  /* Styles when the checkbox is checked */
  .grid input:checked {
    background-color: lightgreen;
  }
  /* Checkmark */
  .grid input {
    background-color: lightgreen;
  }
  /* Styles when the checkbox is not checked */
  .grid input:not(:checked) {
    background-color: lightcoral;
  }
  @media screen and (max-width: 600px) {
    main {
      display: block;
    }
    .viwer,
    form {
      margin: 0 !important;
    }
  }
</style>
